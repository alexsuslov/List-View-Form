// Generated by CoffeeScript 1.4.0
(function() {
  var packages;

  packages = ["jquery", "jqm", "underscore", "backbone", "js/model_item", "text!view/item_form.html"];

  define(packages, function($, jqm, _, BB, Model, Template) {
    var Page;
    Page = BB.View.extend({
      initialize: function(opt) {
        this.opt = opt;
        this.template = _.template(Template);
        if (!this.model) {
          this.addnew = true;
          this.model = new Model();
        }
        return this.model.on('error', function(model, err) {
          var msg_err;
          msg_err = 'Error!  ' + err;
          $.mobile.showPageLoadingMsg($.mobile.pageLoadErrorMessageTheme, msg_err, true);
          setTimeout($.mobile.hidePageLoadingMsg, 1500);
          return this;
        });
      },
      render: function() {
        var data;
        data = this.model.toJSON();
        if (this.opt.urlBack) {
          data.urlBack = this.opt.urlBack;
        } else {
          data.urlBack = '#view/' + data._id;
        }
        if (this.opt.urlSave) {
          data.urlSave = this.opt.urlSave;
        } else {
          data.urlSave = '#view/' + data._id;
        }
        this.$el.html(this.template(data));
        return this;
      },
      events: {
        'keyup input': 'input_change',
        'keyup textarea': 'input_change',
        "click a#btnUpd": "add_update",
        'keyup a#btnDel': 'input_change'
      },
      input_change: function(e) {
        var input;
        input = $(e.currentTarget);
        this.model.set(input.attr('name'), input.val());
        return this;
      },
      add_update: function() {
        if (!this.addnew) {
          this.model._id = this.collection.length;
          this.collection.add(this.model);
        } else {
          this.model.save();
        }
        return this;
      },
      del: function() {
        this.model.remove();
        return this;
      }
    });
    return Page;
  });

}).call(this);
